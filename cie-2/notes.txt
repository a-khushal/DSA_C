src: GFG

Types of Binary Tree based on the number of children:
    1. Full Binary Tree
        A Binary Tree is a full binary tree if every node has 0 or 2 children. The following are examples of a full binary tree. We can also say a full binary tree is a binary tree in which all nodes except leaf nodes have two children. 
        A full Binary tree is a special type of binary tree in which every parent node/internal node has either two or no children. It is also known as a proper binary tree.

    2. Degenerate (or pathological) tree
        A Tree where every internal node has one child. Such trees are performance-wise same as linked list. A degenerate or pathological tree is a tree having a single child either left or right.

    3. Skewed Binary Tree
        A skewed binary tree is a pathological/degenerate tree in which the tree is either dominated by the left nodes or the right nodes. Thus, there are two types of skewed binary tree: left-skewed binary tree and right-skewed binary tree.


Types of Binary Tree On the basis of the completion of levels:
    1. Complete Binary Tree
        A Binary Tree is a Complete Binary Tree if all the levels are completely filled except possibly the last level and the last level has all keys as left as possible. 
        A complete binary tree is just like a full binary tree, but with two major differences:
            Every level except the last level must be completely filled.
            All the leaf elements must lean towards the left.
            The last leaf element might not have a right sibling i.e. a complete binary tree doesn’t have to be a full binary tree.

    2. Perfect Binary Tree
        A perfect binary tree is a type of binary tree in which every internal node has exactly two child nodes and all the leaf nodes are at the same level.
        In a Perfect Binary Tree, the number of leaf nodes is the number of internal nodes plus 1 (L = I + 1 Where L = Number of leaf nodes, I = Number of internal nodes.)
        A Perfect Binary Tree of height h (where the height of the binary tree is the number of edges in the longest path from the root node to any leaf node in the tree, height of root node is 0) has 2^(h+1) – 1 node. 
        An example of a Perfect binary tree is ancestors in the family. Keep a person at root, parents as children, parents of parents as their children. 


    3. Balanced Binary Tree
        A binary tree is balanced if the height of the tree is O(Log n) where n is the number of nodes. For Example, the AVL tree maintains O(Log n) height by making sure that the difference between the heights of the left and right subtrees is at most 1. Red-Black trees maintain O(Log n) height by making sure that the number of Black nodes on every root to leaf paths is the same and that there are no adjacent red nodes. Balanced Binary Search trees are performance-wise good as they provide O(log n) time for search, insert and delete. 
        It is a type of binary tree in which the difference between the height of the left and the right subtree for each node is either 0 or 1. In the figure above, the root node having a value 0 is unbalanced with a depth of 2 units.